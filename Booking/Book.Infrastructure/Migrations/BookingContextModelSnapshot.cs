// <auto-generated />
using System;
using Book.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Book.Infrastructure.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Book.Domain.Aggregates.BookerAggregate.Booker", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookerId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAnnonymous")
                        .HasColumnType("bit");

                    b.HasKey("TenantId");

                    b.ToTable("Booker", "dbo");
                });

            modelBuilder.Entity("Book.Domain.Aggregates.BookingAggregate.BookTicket", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookId");

                    b.Property<string>("BookerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.HasKey("TenantId");

                    b.HasIndex("BookerId");

                    b.ToTable("BookTicket", "dbo");
                });

            modelBuilder.Entity("Book.Domain.Aggregates.BookerAggregate.Booker", b =>
                {
                    b.OwnsOne("Book.Domain.Aggregates.BookerAggregate.BookerInfo", "BookerInf", b1 =>
                        {
                            b1.Property<string>("BookerTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BookerTenantId");

                            b1.ToTable("Booker");

                            b1.WithOwner()
                                .HasForeignKey("BookerTenantId");
                        });

                    b.Navigation("BookerInf");
                });

            modelBuilder.Entity("Book.Domain.Aggregates.BookingAggregate.BookTicket", b =>
                {
                    b.HasOne("Book.Domain.Aggregates.BookerAggregate.Booker", null)
                        .WithMany()
                        .HasForeignKey("BookerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Book.Domain.Aggregates.BookingAggregate.BookTicketInfo", "BookInfo", b1 =>
                        {
                            b1.Property<string>("BookTicketTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AtDate")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AtHour")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AtMinute")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BookerId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Note")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BookTicketTenantId");

                            b1.ToTable("BookTicket");

                            b1.WithOwner()
                                .HasForeignKey("BookTicketTenantId");
                        });

                    b.Navigation("BookInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
