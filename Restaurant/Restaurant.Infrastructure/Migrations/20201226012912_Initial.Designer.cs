// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restaurant.Infrastructure;

namespace Restaurant.Infrastructure.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20201226012912_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.HasSequence("resimgseq", "dbo")
                .IncrementsBy(10);

            modelBuilder.Entity("Restaurant.Domain.Aggregates.Common.FoodAndMenu", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FoodAndMenuId");

                    b.Property<string>("MenuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("TenantId", "MenuId", "FoodId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MenuId");

                    b.ToTable("FoodAndMenu", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.Common.RestaurantAndMenu", b =>
                {
                    b.Property<string>("MenuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ResAndMenuId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("MenuId", "ResId", "TenantId");

                    b.HasIndex("ResId");

                    b.ToTable("ResAndMenu", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.FoodAggregate.FoodItem", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("FoodId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("TenantId");

                    b.ToTable("FoodItem", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.MenuAggregate.Menu", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("MenuId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.HasKey("TenantId");

                    b.ToTable("Menu", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.ResImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseHiLo("resimgseq", "dbo");

                    b.Property<string>("FileExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantsTenantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantsTenantId");

                    b.ToTable("ResImages", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.RestaurantType", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ResTypeId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenantId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("RestaurantType", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.Restaurants", b =>
                {
                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ResId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RestaurantTypeTenantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.HasKey("TenantId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RestaurantTypeTenantId");

                    b.ToTable("Restaurant", "dbo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.Common.FoodAndMenu", b =>
                {
                    b.HasOne("Restaurant.Domain.Aggregates.FoodAggregate.FoodItem", null)
                        .WithMany("FoodAndMenus")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Aggregates.MenuAggregate.Menu", null)
                        .WithMany("FoodAndMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.Common.RestaurantAndMenu", b =>
                {
                    b.HasOne("Restaurant.Domain.Aggregates.MenuAggregate.Menu", null)
                        .WithMany("RestaurantAndMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Domain.Aggregates.RestaurantAggregate.Restaurants", null)
                        .WithMany("RestaurantAndMenus")
                        .HasForeignKey("ResId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.FoodAggregate.FoodItem", b =>
                {
                    b.OwnsOne("Restaurant.Domain.Aggregates.FoodAggregate.FoodInfo", "FoodInfo", b1 =>
                        {
                            b1.Property<string>("FoodItemTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FoodName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FoodItemTenantId");

                            b1.ToTable("FoodItem");

                            b1.WithOwner()
                                .HasForeignKey("FoodItemTenantId");
                        });

                    b.Navigation("FoodInfo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.MenuAggregate.Menu", b =>
                {
                    b.OwnsOne("Restaurant.Domain.Aggregates.MenuAggregate.MenuInfo", "MenuInfo", b1 =>
                        {
                            b1.Property<string>("MenuTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Des")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MenuTenantId");

                            b1.ToTable("Menu");

                            b1.WithOwner()
                                .HasForeignKey("MenuTenantId");
                        });

                    b.Navigation("MenuInfo");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.ResImage", b =>
                {
                    b.HasOne("Restaurant.Domain.Aggregates.RestaurantAggregate.Restaurants", null)
                        .WithMany("ResImages")
                        .HasForeignKey("RestaurantsTenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.Restaurants", b =>
                {
                    b.HasOne("Restaurant.Domain.Aggregates.RestaurantAggregate.RestaurantType", "RestaurantType")
                        .WithMany()
                        .HasForeignKey("RestaurantTypeTenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Restaurant.Domain.Aggregates.RestaurantAggregate.Address", "Address", b1 =>
                        {
                            b1.Property<string>("RestaurantsTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ward")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RestaurantsTenantId");

                            b1.ToTable("Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantsTenantId");
                        });

                    b.OwnsOne("Restaurant.Domain.Aggregates.RestaurantAggregate.WorkTime", "WorkTime", b1 =>
                        {
                            b1.Property<string>("RestaurantsTenantId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("CloseTime")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OpenTime")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RestaurantsTenantId");

                            b1.ToTable("Restaurant");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantsTenantId");
                        });

                    b.Navigation("Address");

                    b.Navigation("RestaurantType");

                    b.Navigation("WorkTime");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.FoodAggregate.FoodItem", b =>
                {
                    b.Navigation("FoodAndMenus");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.MenuAggregate.Menu", b =>
                {
                    b.Navigation("FoodAndMenus");

                    b.Navigation("RestaurantAndMenus");
                });

            modelBuilder.Entity("Restaurant.Domain.Aggregates.RestaurantAggregate.Restaurants", b =>
                {
                    b.Navigation("ResImages");

                    b.Navigation("RestaurantAndMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
